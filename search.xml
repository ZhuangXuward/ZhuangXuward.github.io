<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[悲剧]]></title>
    <url>%2F2019%2F05%2F14%2F%E6%82%B2%E5%89%A7%2F</url>
    <content type="text"><![CDATA[这不是第一个版本的博客为什么呢？因为第一个版本的博客已经一去不复返了… 事情都缘自5.13的晚上，我在学习react的使用，发现sublime中scipt直接写react很难配置高亮语法，于是我转投vscode，真心感受到vscode的强大，sublime有的vscode基本都有，vscode唯一不足的就是不如sublime那么简洁简约。 然后！我开心惬意地捣鼓配置着vscode，发现怎么有个听诊器，上面还有红点，一看有5000个changes未commit，啊…突然想起，写博客的时候由于hexo的打包，我没有使用git去三部曲提交changes，然后强迫症的我就想去掉听诊器的红色标记，捣鼓着…点到了“discard all changes”。 . . . . . . 瞬间…我的天啊！我发现怎么我的博客本地文件没了啊？终于体会到灭霸打响指时英雄们的心情了！就是这种撕心裂肺歇斯底里，但是又毫无办法啊！那一瞬间感觉天都塌下来了，毕竟呕心沥血搭建和修改维护的啊。 没办法，镇定思痛之后，开始重建工作。选择了新的主题next，把该配置的配置，博文全部重新上传。弄到了一点多，算是度过了这次浩劫吧。 教训一定要git！一定要git！一定要git！]]></content>
      <categories>
        <category>闲谈</category>
      </categories>
      <tags>
        <tag>深刻教训</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《JavaScript DOM 编程艺术》读书笔记]]></title>
    <url>%2F2019%2F05%2F13%2F%E3%80%8AJavaScript-DOM-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[事件处理函数在预定事件发生时让预先安排好的JavaScript代码开始执行，即“触发一个动作”。例如：onclick，onmouseover，onmouseout等等。 语法：event = &quot;JavaScript statement(s)&quot;， JavaScript代码是包含在双引号中的，可以把任意数量的JavaScript语句放在这对引号之间，分号隔开即可。 机制：给某个元素添加事件处理函数后，一旦发生预定事件，相应的JavaScript代码就执行，执行后可以返回一个结果，这个结果被传递回事件处理函数。 利用这个机制，我们可以让动作没有触发，但是却能执行触发之后的JavaScript代码。比如书中的“JavaScript美术馆例子”：onclick事件中，点击链接执行一段预定代码，在代码后加上&quot;return false;&quot;，那么代码依旧被执行，但是页面却不会跳转，因为返回false给事件处理函数，认为“这个链接没有被点击”。代码如下。 12345678910&lt;body&gt; &lt;h1&gt;Snapshots&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="F:\壁纸\973279.jpg" onclick="showPic(this); return false;"&gt;Aquaman&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="F:\壁纸\923047.jpg" onclick="showPic(this); return false;"&gt;Forest&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="F:\壁纸\486147.jpg" onclick="showPic(this); return false;"&gt;Boat&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="F:\壁纸\340480.jpg" onclick="showPic(this); return false;"&gt;Cat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;img src="F:\壁纸\973279.jpg" id="placeholder"&gt;&lt;/body&gt; 【待更新…】]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天猫网页前端实现]]></title>
    <url>%2F2019%2F05%2F10%2F%E5%A4%A9%E7%8C%AB%E7%BD%91%E9%A1%B5%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[前言学习了jQuery和boostrap4的教程，苦于没有项目练手，于是决定模仿天猫网页，纯前端实现，积累经验。 首先先把天猫网页规划一下，大致可以分为： 公共页面 首页 我的订单 登录 注册 购物车 产品内页 订单子页面 其他 每一部分逐步完成，最后整合在一起。（未完成部分思路和前面几个一样，日后有空再继续完善） 公共页面公共页面就是每个页面都有的内容，包括页头位置的置顶导航栏，紧接着页头的搜索框，以及页脚的证书链接，最后再将这三个子模块整合在一起得到公共页面。 代码构成如图： 置顶导航栏效果： 布局： 最外层是nav元素，语义化作用，用来布局，与div的区别在于nav更加明确的告诉搜索引擎这是导航栏，帮助搜索引擎理解你的网页。 内部是连续摆放的几个元素，可以用span内嵌超链a，右边两个右浮动的元素。 注意到文字部分是居中显示，而置顶导航栏有个浅灰色的背景，需要把内部元素再套一个外层div，设置div的宽度和margin，使得div在nav中居中显示，然后nav宽度为100%并设置背景颜色。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354 &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt; &lt;link rel="stylesheet" href="https://cdn.staticfile.org/twitter-bootstrap/3.1.0/css/bootstrap.min.css"&gt; &lt;script src="https://cdn.staticfile.org/jquery/3.2.1/jquery.min.js"&gt;&lt;/script&gt; &lt;script src="https://cdn.staticfile.org/popper.js/1.12.5/umd/popper.min.js"&gt;&lt;/script&gt; &lt;script src="https://cdn.staticfile.org/twitter-bootstrap/3.1.0/js/bootstrap.min.js"&gt;&lt;/script&gt; &lt;style type="text/css"&gt; body&#123; font-size:12px; font-family:Arial; &#125; nav.top_outer &#123; background-color: rgb(242, 242, 242); border-bottom:1px solid #e7e7e7; &#125; nav div.top &#123; margin: 0 auto; width: 1000px; padding-top: 5px; padding-bottom: 5px; &#125; nav div.top a, nav div.top span &#123; color: rgb(156, 155, 154); margin: 0 10px; &#125; nav div.top a:hover &#123; text-decoration: none; color: rgb(196, 0, 0); &#125; .redColor &#123; color: rgb(196, 0, 0) !important; &#125; .reverse &#123; transform: rotateY(180deg); /*原来的购物车图标方向向左，改成向右*/ &#125;&lt;/style&gt;&lt;nav class="top_outer"&gt; &lt;div class="top"&gt; &lt;a href="#"&gt; &lt;span class="glyphicon glyphicon-home redColor"&gt;&lt;/span&gt; 天猫首页 &lt;/a&gt; &lt;span&gt;喵，欢迎来到天猫&lt;/span&gt; &lt;a href="#"&gt;请登录&lt;/a&gt; &lt;a href="#"&gt;免费注册&lt;/a&gt; &lt;span class="pull-right"&gt; &lt;a href="#"&gt;我的订单&lt;/a&gt; &lt;a href="#"&gt; &lt;span class="glyphicon glyphicon-shopping-cart redColor reverse"&gt;&lt;/span&gt; 购物车&lt;strong&gt;0&lt;/strong&gt;件 &lt;/a&gt; &lt;/span&gt; &lt;/div&gt;&lt;/nav&gt; 其中引入了bootstrap3和jQuery。方便使用图标和后面的轮播效果。 搜索框效果： 布局： 搜索栏居中div，内部包含同行排列的input和button元素，以及换行排列的子div。 天猫logo使用absolute定位，实现水平排列。（也可以将居中div设置为inline-block，不过我习惯于调整div内容，所以就让图片位置先定下来。） 居中div即.searchDiv其实包含了搜索框和搜索按钮，设置了height之后，添加div，这个div实际上是overflow的。 其他细节：logo外套锚点a，灵活运用span。 代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;style type="text/css"&gt; body&#123; font-size:12px; font-family:Arial; &#125; img#logo &#123; position: absolute; left: 230px; top: 30px; &#125; div.searchDiv &#123; background-color: #C40000; width: 400px; margin: 50px auto; padding: 1px; height: 40px; &#125; div.searchDiv input &#123; outline: none; width: 275px; height: 36px; margin: 1px; border: 1px solid transparent; &#125; div.searchDiv button &#123; background-color: #C40000; border: 1px solid transparent; color: white; font-weight: bold; font-size: 20px; width: 110px; &#125; div.searchBelow span, div.searchBelow a &#123; color: rgb(134, 134, 134); display: inline-block; margin-top: -17px; &#125; div.searchBelow&gt;span&gt;span &#123; margin: 20px; &#125; div.searchBelow a:hover &#123; color: #C40000; text-decoration: none; &#125;&lt;/style&gt;&lt;div class="search_outer"&gt; &lt;a href="#"&gt; &lt;img id="logo" src="http://how2j.cn/tmall/img/site/logo.gif" /&gt; &lt;/a&gt; &lt;div class="searchDiv"&gt; &lt;input type="text" name="keyword" placeholder="JavaScript高级程序设计"&gt; &lt;button type="submit" &gt;搜索&lt;/button&gt; &lt;div class="searchBelow"&gt; &lt;span&gt;&lt;a href="#"&gt;鼠标&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;显示屏&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;手机&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;电脑&lt;/a&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 页脚效果： 布局： 原理和指定导航栏类似，不多赘述。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184&lt;style type="text/css"&gt; body&#123; font-size: 12px; font-family: Arial; &#125; footer &#123; margin-top: 20px; border-top: 1px solid rgb(231, 231, 231); &#125; div.footerImg &#123; text-align: center; padding: 20px; border-bottom: 1px solid rgb(231, 231, 231); &#125; div.footerMid &#123; padding: 30px 10px; width: 1007px; margin: 0 auto; &#125; div.mid_column &#123; float: left; width: 220px; top: 100px; &#125; div.mid_column a &#123; display: block; padding-top: 3px; color:#999; &#125; div.mid_column span.mid_column_title, div.mid_img span.mid_column_title &#123; color: #646464; font-weight: bold; font-size: 16px; &#125; div.mid_column a:hover &#123; text-decoration:none; color: #C40000; &#125; div.footerLogo &#123; margin: 0 auto; width: 1007px; &#125; div.footerBelow_outer &#123; border-top: 2px solid rgb(196, 0, 0); background-color: black; &#125; div.footerBelow &#123; margin: 0 auto; width: 1007px; padding: 5px; &#125; div.footerBelow .whiteLink a, div.footerBelow .whiteLink span &#123; color: white; padding-right: 5px; &#125; div.footerBelow .whiteLink, div.footerBelow .license &#123; padding: 5px 0 10px 5px; &#125; div.footerBelow .license span &#123; color: rgb(151, 152, 156); &#125; div.footerBelow .license div &#123; padding: 10px 0 5px 0; &#125; div.footerBelow .whiteLink a:hover &#123; text-decoration: none; &#125;&lt;/style&gt;&lt;footer&gt; &lt;div class="footerImg"&gt; &lt;a href="#"&gt;&lt;img src="http://how2j.cn/tmall/img/site/ensure.png"&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="footerMid"&gt; &lt;div class="mid_column"&gt; &lt;span class="mid_column_title"&gt;购物指南&lt;/span&gt; &lt;a href="#"&gt;免费注册&lt;/a&gt; &lt;a href="#"&gt;开通支付宝&lt;/a&gt; &lt;a href="#"&gt;支付宝充值&lt;/a&gt; &lt;/div&gt; &lt;div class="mid_column"&gt; &lt;span class="mid_column_title"&gt;天猫保障&lt;/span&gt; &lt;a href="#"&gt;发票保障&lt;/a&gt; &lt;a href="#"&gt;售后规则&lt;/a&gt; &lt;a href="#"&gt;缺货赔付&lt;/a&gt; &lt;/div&gt; &lt;div class="mid_column"&gt; &lt;span class="mid_column_title"&gt;支付方式&lt;/span&gt; &lt;a href="#"&gt;快捷支付&lt;/a&gt; &lt;a href="#"&gt;信用卡&lt;/a&gt; &lt;a href="#"&gt;蚂蚁花呗&lt;/a&gt; &lt;a href="#"&gt;货到付款&lt;/a&gt; &lt;/div&gt; &lt;div class="mid_column"&gt; &lt;span class="mid_column_title"&gt;商家服务&lt;/span&gt; &lt;a href="#"&gt;商家入驻&lt;/a&gt; &lt;a href="#"&gt;商家中心&lt;/a&gt; &lt;a href="#"&gt;天猫智库&lt;/a&gt; &lt;a href="#"&gt;天猫规则&lt;/a&gt; &lt;a href="#"&gt;物流服务&lt;/a&gt; &lt;a href="#"&gt;喵言喵语&lt;/a&gt; &lt;a href="#"&gt;运营服务&lt;/a&gt; &lt;/div&gt; &lt;div class="mid_img"&gt; &lt;span class="mid_column_title"&gt;手机天猫&lt;/span&gt; &lt;img src="http://how2j.cn/tmall/img/site/ma.png"&gt; &lt;/div&gt; &lt;div style="clear: both;"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div style="clear: both;"&gt;&lt;/div&gt; &lt;div class="footerLogo"&gt; &lt;img src="http://how2j.cn/tmall/img/site/cateye.png"&gt; &lt;!-- 天猫logo --&gt; &lt;/div&gt; &lt;div class="footerBelow_outer"&gt; &lt;div class="footerBelow"&gt; &lt;div class="whiteLink"&gt; &lt;a href="#"&gt;关于天猫&lt;/a&gt; &lt;a href="#"&gt;帮助中心&lt;/a&gt; &lt;a href="#"&gt;开放平台&lt;/a&gt; &lt;a href="#"&gt;诚聘英才&lt;/a&gt; &lt;a href="#"&gt;联系我们&lt;/a&gt; &lt;a href="#"&gt;网站合作&lt;/a&gt; &lt;a href="#"&gt;法律声明&lt;/a&gt; &lt;a href="#"&gt;知识产权&lt;/a&gt; &lt;a href="#"&gt;廉正举报&lt;/a&gt; &lt;/div&gt; &lt;div class="whiteLink"&gt; &lt;a href="#"&gt;阿里巴巴集团&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;淘宝网&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;天猫&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;聚划算&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;全球速卖通&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;阿里巴巴国际交易市场&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;1688&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;阿里妈妈&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;阿里旅行·去啊&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;阿里云计算&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;阿里通信&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;YunOS&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;天天动听&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;来往&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;钉钉&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;支付宝&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;万网&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;高德&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;优视&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;友盟&lt;/a&gt; &lt;span&gt;|&lt;/span&gt; &lt;a href="#"&gt;虾米&lt;/a&gt; &lt;/div&gt; &lt;div class="license"&gt; &lt;span&gt;增值电信业务经营许可证： 浙B2-20110446&lt;/span&gt; &lt;span&gt;网络文化经营许可证：浙网文[2015]0295-065号&lt;/span&gt; &lt;span&gt;互联网医疗保健信息服务 审核同意书 浙卫网审【2014】6号 &lt;/span&gt; &lt;span&gt;互联网药品信息服务资质证书编号：浙-（经营性）-2012-0005&lt;/span&gt; &lt;div class="copyRightYear"&gt;© 2003-2016 TMALL.COM 版权所有&lt;/div&gt; &lt;div&gt; &lt;img src="http://how2j.cn/tmall/img/site/copyRight1.jpg"&gt; &lt;img src="http://how2j.cn/tmall/img/site/copyRight2.jpg"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/footer&gt; 首页包括了前面的公共页面，以及导航轮播、分类和推荐产品以及产品列表。再加上js交互。 导航轮播效果： 布局： 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109&lt;style type="text/css"&gt; body&#123; font-size:12px; font-family:Arial; &#125; div.item img &#123; width: 100%; &#125; div#carousel-outer &#123; width: 1000px; margin: 20px auto; &#125; div.headBar &#123; background-color: rgb(221, 39, 39); &#125; div.headBar div.head &#123; display: inline-block; width: 200px; height: 36px; line-height: 36px; font-weight: bold; font-size: 16px; margin:0 20px; color: white; background-color: #C60A0A; padding-left: 10px; &#125; div.headBar div.rightMenu &#123; display: inline-block; &#125; div.headBar div.rightMenu img &#123; height: 30px; &#125; div.headBar div.rightMenu span &#123; margin-right: 40px; &#125; div.headBar div.rightMenu span a &#123; color: white; font-size: 16px; text-decoration: none; &#125; div.headBar div.rightMenu img#tmall &#123; display: inline; width: 50%; &#125; div#headBar_fill &#123; position: relative; width: 100%; height: 36px; background-color: rgb(221, 39, 39); top: -480px; z-index: -1; &#125; div#carousel_fill &#123; position: relative; width: 100%; height: 424px; background-color: rgb(232, 232, 232); top: -480px; z-index: -1; &#125;&lt;/style&gt;&lt;div id="carousel-outer" class="carousel slide" data-ride="carousel"&gt; &lt;div class="headBar"&gt; &lt;div class="head"&gt; &lt;span class="glyphicon glyphicon-th-list"&gt;&lt;/span&gt; &lt;span&gt;商品分类&lt;/span&gt; &lt;/div&gt; &lt;div class="rightMenu"&gt; &lt;span&gt;&lt;a href="#"&gt;&lt;img src="http://how2j.cn/tmall/img/site/chaoshi.png"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;&lt;img src="http://how2j.cn/tmall/img/site/guoji.png"&gt;&lt;/a&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;平板电视&lt;/a&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;马桶&lt;/a&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;沙发&lt;/a&gt;&lt;/span&gt; &lt;span&gt;&lt;a href="#"&gt;电热水器&lt;/a&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Indicators --&gt; &lt;ol class="carousel-indicators"&gt; &lt;li data-target="#carousel-outer" data-slide-to="0" class="active"&gt;&lt;/li&gt; &lt;li data-target="#carousel-outer" data-slide-to="1"&gt;&lt;/li&gt; &lt;li data-target="#carousel-outer" data-slide-to="2"&gt;&lt;/li&gt; &lt;li data-target="#carousel-outer" data-slide-to="3"&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Wrapper for slides --&gt; &lt;div class="carousel-inner" role="listbox"&gt; &lt;div class="item active"&gt; &lt;img src="http://how2j.cn/tmall/img/lunbo/1.jpg"&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img src="http://how2j.cn/tmall/img/lunbo/2.jpg"&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img src="http://how2j.cn/tmall/img/lunbo/3.jpg"&gt; &lt;/div&gt; &lt;div class="item"&gt; &lt;img src="http://how2j.cn/tmall/img/lunbo/4.jpg"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 轮播图颜色填充 --&gt; &lt;div id="headBar_fill"&gt;&lt;/div&gt; &lt;div id="carousel_fill"&gt;&lt;/div&gt; &lt;!-- 轮播图颜色填充 --&gt;&lt;/body&gt; 关于背景颜色单纯使用轮播，居中之后，两边是空白的，要添加背景颜色就需要像前面的置顶导航栏和页脚一样，添加外层div，设置width为100%，设置背景颜色。 但这里我觉得单纯轮播的代码块就够大了，所以我就在轮播div后添加了两个颜色填充div，使用relative定位移动到相应的位置，实现轮播图两边的背景颜色。 关于轮播图细节部分我不是很了解，一开始我直接找到bootstrap4文档中的轮播图，复制粘贴过来，发现图片底部的指示器没有作用，点击没反应。 解决方法：通过浏览器自带的开发者工具，打开之后发现报错提示bootstrap的版本不对，才发现我的库调用的是bootstrap3的版本，改成相应版本之后轮播图就正常了。 商品分类布局： 商品列表有很多类，每一个类作为一个div，每个div中包含五个商品div。如图所示。 商品列表布局： 商品列表有很多类，每一个类作为一个div，每个div中包含五个商品div。如图所示。 交互导航栏猫耳朵交互效果 思路： 将一张猫耳朵图片隐藏起来，当鼠标移到导航栏选项时，通过jQuery获取此时位置的left值，通过一定的平移显示得到相应的效果。由于每个选项的长度不一，为了使猫耳朵能在每个选项的正中间出现，可以把选项的宽度考虑在平移的长度中。 关键：jQuery的position()方法。position() 方法返回第一个匹配元素的位置（相对于它的父元素）。该方法返回一个带有两个属性（以像素为单位的 top 和 left 位置）的对象。 代码：123456789101112131415// 显示和隐藏猫耳朵 $("div.headBar div.rightMenu span").mouseover(function() &#123; var pos_left = $(this).position().left; var width_menu = $(this).css("width"); var pos_Left = parseInt(pos_left) + parseInt(width_menu)/2; // 注意为$(this)而不是this $("img.catEar").css(&#123; left: pos_Left+246, &#125;); $("img.catEar").fadeIn(350); &#125;); $("div.headBar div.rightMenu span").mouseout(function() &#123; $("img.catEar").css("display", "none"); // 由于使用了绝对定位，使用fadeOut会有偏移 &#125;); 分类页交互 思路： 一开始我打算用多级菜单，但想着想着头都大了，其实直接用两个块级元素就可以解决。左右两个块，左边块为分类标签，右边块为具体商品名字，把右边块隐藏起来，当鼠标移到分类标签上和右边块上时，相应右边块才显示出来，这里要注意，不仅是鼠标在分类标签上才显示，鼠标移到具体商品页的时候也要显示，不然鼠标移开标签，右边块就消失了。 关键：1.jQuery的mouseover和mouseout方法。用原生JavaScript也可以做，不过从DOM结点树中找到想要的元素显然没有直接用CSS选择器来得方便和简洁。（这里又一次感受到jQuery库对于DOM操作的方便） [cid=&quot;+cid_temp+&quot;] cid为自定义的属性，用于区分不同的分类标签，同时cid的值为字符串，cid_temp经过前面的计算之后转化为Number数值类型，通过&quot;+cid_temp+&quot;重新转化为字符串。 jQuery代码：1234567891011121314151617181920212223// 鼠标移到分类标签上，显示分类页内容 $("div.category div.categoryMenu_list").mouseover(function() &#123; var cid_temp = $(this).attr("cid"); cid_temp = cid_temp%4 + 87; // 总共14个list，由于懒的原因...用4个分类内容循环表示 $("div.categoryContent[cid="+cid_temp+"]").show(); &#125;); // 鼠标移开分类标签，隐藏分类页内容 $("div.category div.categoryMenu_list").mouseout(function() &#123; var cid_temp = $(this).attr("cid"); cid_temp = cid_temp%4 + 87; $("div.categoryContent[cid="+cid_temp+"]").hide(); &#125;); // 鼠标移到分类内容上，持续显示 $("div.categoryContent").mouseover(function() &#123; var cid_temp = $(this).attr("cid"); $("div.categoryContent[cid="+cid_temp+"]").show(); &#125;); // 鼠标移开分类内容，隐藏分类页内容 $("div.categoryContent").mouseout(function() &#123; var cid_temp = $(this).attr("cid"); $("div.categoryContent[cid="+cid_temp+"]").hide(); &#125;); 商品列表交互 思路： 鼠标移至商品div上，图片透明度变小，加上外边框。 关键：1.CSS中hover即可。 outline由于固定了width，使用border会破坏水平方向布局，或者导致图片闪动，使用outline则可以规避这些问题。 代码：1234567div.eachCategoryProducts div.productsItem:hover &#123; outline: 0.5px solid red; /*不使用border，border会破坏水平布局*/ &#125; div.eachCategoryProducts div.productsItem img:hover &#123; opacity: 0.7; &#125; 登录和注册界面登录效果： 布局： 登录界面布局比较简单，用几个div即可，其中账户登录的外层div可以使用绝对定位脱离文档流，并定位到如图位置。 布局代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101 body&#123; font-size:12px; font-family:Arial; min-width:1020px; &#125; div.loginInterface &#123; width: 1190px; margin: 0 auto; position: relative; &#125; div.loginInterface div.loginLogo &#123; margin: 20px 20px 20px 0; &#125; div.loginInterface div.loginBlock &#123; position: absolute; width: 350px; height: 400px; top: 150px; right: 100px; border: 1px solid white; background-color: white; padding: 20px 10px 0px 10px; &#125; div.loginInterface div.loginBlock div.loginBlock_text &#123; font-weight: bold; font-size: 15px; color: rgb(60, 60, 60); margin: 20px 10px; &#125; div.loginInterface div.loginBlock div.loginBlock_input &#123; margin: 10px 10px; &#125; div.loginInterface div.loginBlock div.loginBlock_input span &#123; width: 35px; line-height: 35px; text-align: center; font-size: 20px; display: inline-block; color: rgb(96, 96, 96); background-color: rgb(203, 203, 203); &#125; div.loginInterface div.loginBlock div.loginBlock_input input &#123; height: 34px; width: 269px; position: relative; top: -4px; left: -5px; padding-left: 5px; border: 1px solid lightgray; &#125; div.loginInterface div.loginBlock a &#123; display: inline-block; margin: 10px 10px 20px 10px; text-decoration: none; color: gray; &#125; div.loginInterface div.loginBlock a:hover &#123; color: rgb(218, 13, 30); &#125; div.loginInterface div.loginBlock_button button &#123; width: 307px; margin-left: 8px; background-color: rgb(196, 0, 0); color: white; font-weight: bold; &#125; div.loginSuccess &#123; width: 200px; text-align: center; margin: 10px auto; font-size: 16px; color: rgb(196, 0, 0); display: none; &#125; &lt;div class="loginInterface"&gt; &lt;div class="loginLogo"&gt; &lt;a href="../首页/total.html"&gt;&lt;img src="http://how2j.cn/tmall/img/site/simpleLogo.png"&gt;&lt;/a&gt; &lt;/div&gt; &lt;img src="http://how2j.cn/tmall/img/site/loginBackground.png" class="loginBackground"&gt; &lt;div class="loginBlock"&gt; &lt;div class="loginBlock_text"&gt;账户登录&lt;/div&gt; &lt;div class="loginBlock_input"&gt; &lt;span class=" glyphicon glyphicon-user"&gt;&lt;/span&gt; &lt;input type="text" placeholder="手机/会员名/邮箱" name="name" id="name"&gt; &lt;/div&gt; &lt;div class="loginBlock_input"&gt; &lt;span class=" glyphicon glyphicon-lock"&gt;&lt;/span&gt; &lt;input type="password" placeholder="密码" name="password" id="password"&gt; &lt;/div&gt; &lt;a href="#"&gt;忘记登录密码&lt;/a&gt; &lt;a href="register.html" class="pull-right"&gt;免费注册&lt;/a&gt; &lt;div class="loginBlock_button"&gt; &lt;button class="btn btn-block"&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;div class="loginSuccess"&gt; &lt;p&gt;登录成功！&lt;/p&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 注册效果： 布局： 注册界面和登录界面类似，我是直接套用登录界面的布局，其实可以再加上几个input输入，比如“确认密码”、“注册邮箱”、“手机号”和“已阅读XXX同意书”等等。 布局代码：参考登录界面布局代码。 交互登录/注册界面输入提示 思路： 在登录模块后增加一行文字，采用绝对定位，并先隐藏起来，点击“登录”按钮事件之后，获取两个输入框的值，根据值是否为空分为对应的三种情况，修改文字块的字符串，再显示出来。在用户名和密码都输入了之后为“登录成功”，应跳转到首页。 关键： display隐藏； 获取input的值用value，jQuery：$(&quot;XX&quot;).val()方法，原生JavaScript：document.getElementById(&quot;xx&quot;).value属性； 修改字符串可以用innerHTML，也可以用jQuery的html()方法； 自动跳转页面使用BOM的window.location.replace(url)。 location对象：是window对象的一部分，通过window.location属性访问，包含当前url的相关信息。| 方法 | 说明 || :–: | :–:|| assign() | 载入新的文档，可以后退上一页 || reload() | 重新载入当前文档 || replace() | 用新文档替换当前文档，不可后退上一页 |window.location.assign(url)： 加载 URL 指定的新的 HTML 文档。就相当于一个链接，跳转到指定的url，当前页面会转为新页面内容，可以点击后退返回上一个页面。 window.location.replace(url) ： 通过加载 URL 指定的文档来替换当前文档，这个方法是替换当前窗口页面，前后两个页面共用一个窗口，所以是没有后退返回上一页的 代码：1234567891011121314$("div.loginBlock_button button").click(function() &#123; var name = $("div.loginBlock_input input#name").val(); // 注意这里与js的区别，js：.value，jQuery：.val() var password = $("div.loginBlock_input input#password").val() if (name == "") $("div.loginSuccess").html("请输入用户名！"); else if (password == "") $("div.loginSuccess").html("请输入密码！"); else &#123; $("div.loginSuccess").html("登录成功！"); window.location.replace("../首页/total_login.html"); &#125; $("div.loginSuccess").show();&#125;); 注册界面交互实现类似，不赘述。 我的订单效果： 布局： 订单页面布局相对复杂，分为标题部分和商品选项部分。 标题部分：同样用外层div嵌套内部几个div，margin: 0 auto居中；标题栏在五个文字后加入一个空div，实现大横条效果，（为什么不用大div border-bottom？-因为后面还有交互，点击“所有订单”、“待付款”等时，相应的文字下方的灰色横线变红，所以用每个span的下边框，而不是大div的下边框）。 商品选项部分：多个商品选项，每个选项都是一个table表格，通过colspan进行多列的合并。 布局代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142div.myOrder_headBar &#123; width: 1000px; margin: 0 auto; /*padding: 10px;*/ padding-left: 0; padding-bottom: 0; /*border-bottom: 2px solid rgb(232, 232, 232);*/&#125;div.myOrder_headBar:after &#123; content: ""; display: block; clear: both;&#125;div.myOrder_headBar div.myOrder_headItem &#123; float: left; text-align: center; width: 100px; padding: 10px; border-bottom: 2px solid rgb(232, 232, 232);&#125;div.myOrder_headBar div.myOrder_lastone &#123; width: 500px; height: 19px; float: left; margin-top: 25.5px; border-bottom: 2px solid rgb(232, 232, 232);&#125;div.myOrder_headBar div.myOrder_headItem a &#123; color: black; font-weight: bold; font-size: 16px; width: 90px; display: inline-block; text-decoration: none; padding-right: 10px; border-right: 1px solid rgb(232, 232, 232);&#125;div.myOrder_headBar div.myOrder_headItem a:active &#123;&#125;/*div.myOrder_headBar div.myOrder_headItem:hover &#123; border-bottom: 2px solid rgb(196, 0, 0);&#125;*/div.myOrder_headBar div.myOrder_headItem:hover a &#123; color: rgb(196, 0, 0); text-decoration: none;&#125;div.myOrder_tableTitle &#123; width: 1000px; margin: 20px auto; background-color: rgb(245, 245, 245); line-height: 40px; border: 1px solid rgb(232, 232, 232);&#125;div.myOrder_tableTitle span&#123; display: inline-block; text-align: center;&#125;div.myOrder_itemList &#123; width: 1000px; margin: 20px auto;&#125;div.myOrder_itemList table &#123; width: 1000px; margin-top: 20px; border: 1px solid rgb(232, 232, 232);&#125;div.myOrder_itemList a.wangwanglick &#123; display: inline-block; background-image:url(http://how2j.cn/tmall/img/site/wangwang.gif);&#125;div.myOrder_itemList tr.myOrder_itemTitle &#123; background-color: rgb(241, 241, 241); height: 40px;&#125;div.myOrder_itemList tr.myOrder_itemTitle td.myOrder_desc &#123; /*padding: 10px;*/ padding-left: 10px;&#125;tr.myOrder_itemTitle_Content td.myOrder_desc &#123; width: 470px;&#125;tr.myOrder_itemTitle_Content td.myOrder_desc a &#123; text-decoration: none; display: inline-block; position: relative; top: -30px; color: rgb(184, 184, 184);&#125;tr.myOrder_itemTitle_Content td.myOrder_desc div &#123; position: relative; bottom: -10px;&#125;div.myOrder_itemList tr.myOrder_itemTitle div.wangwanglink &#123; display: inline-block; background-image: url("http://how2j.cn/tmall/img/site/wangwang.gif"); width: 67px; height: 22px;&#125;div.myOrder_itemList table td &#123; /*border: 1px solid black;*/&#125;tr.myOrder_itemTitle_Content td.myOrder_pic &#123; display: inline-block; margin: 10px; width: 70px;&#125; td.wangwanglink, td.myOrder_sum &#123; text-align: center;&#125;td.myOrder_sum &#123; border-right: 1px solid rgb(232, 232, 232);&#125;td.myOrder_price &#123; width: 80px; border-right: 1px solid rgb(232, 232, 232);&#125;td.myOrder_amount &#123; width: 100px; text-align: center; border-right: 1px solid rgb(232, 232, 232);&#125;td.orderItemDeleteTD a.deleteOrderLink &#123; color: gray; font-size: 16px;&#125;td.myOrder_confirm, td.orderItemDeleteTD&#123; text-align: center; width: 110px;&#125;td.myOrder_confirm button &#123; color: white; background-color: rgb(102, 182, 255); border: rgb(102, 182, 255);&#125;tr.myOrder_itemTitle_Content td.myOrder_desc a:hover &#123; color: rgb(196, 0, 0);&#125;div.myOrder_itemList table:hover &#123; outline: 2px solid rgb(170, 170, 170);&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;div class="myOrder_headBar"&gt; &lt;div class="myOrder_headItem" sit="all"&gt; &lt;a href="#" sit="all"&gt;所有订单&lt;/a&gt; &lt;/div&gt; &lt;div class="myOrder_headItem" sit="pay"&gt; &lt;a href="#" sit="pay"&gt;待付款&lt;/a&gt; &lt;/div&gt; &lt;div class="myOrder_headItem" sit="send"&gt; &lt;a href="#" sit="send"&gt;待发货&lt;/a&gt; &lt;/div&gt; &lt;div class="myOrder_headItem" sit="confirm"&gt; &lt;a href="#" sit="confirm"&gt;待收货&lt;/a&gt; &lt;/div&gt; &lt;div class="myOrder_headItem" sit="evaluation"&gt; &lt;a href="#" sit="evaluation"&gt;待评价&lt;/a&gt; &lt;/div&gt; &lt;div class="myOrder_lastone"&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="myOrder_tableTitle"&gt; &lt;span id="baby" style="width: 560px;"&gt;宝贝&lt;/span&gt; &lt;span id="price" style="width: 100px;"&gt;单价&lt;/span&gt; &lt;span id="amount" style="width: 100px;"&gt;数量&lt;/span&gt; &lt;span id="pay" style="width: 120px;"&gt;实付款&lt;/span&gt; &lt;span id="deal" style="width: 100px;"&gt;交易操作&lt;/span&gt; &lt;/div&gt; &lt;div class="myOrder_itemList"&gt; &lt;table class="myOrder_itemContent" sit="evaluation"&gt; &lt;tbody&gt; &lt;tr class="myOrder_itemTitle"&gt; &lt;td colspan="2" class="myOrder_desc"&gt; &lt;b&gt;2019-04-12 17:00:41&lt;/b&gt; &lt;span&gt;订单号: 20190412170041674790 &lt;/td&gt; &lt;td colspan="2"&gt; &lt;img width="13px" src="http://how2j.cn/tmall/img/site/orderItemTmall.png"&gt;天猫商场 &lt;/td&gt; &lt;td colspan="1" class="wangwanglink"&gt; &lt;a href="#nowhere" class="wangwanglink"&gt; &lt;div class="wangwanglink"&gt;&lt;/div&gt; &lt;/a&gt; &lt;/td&gt; &lt;td class="orderItemDeleteTD"&gt; &lt;a href="#nowhere" oid="946" class="deleteOrderLink"&gt; &lt;span class="orderListItemDelete glyphicon glyphicon-trash"&gt;&lt;/span&gt; &lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class="myOrder_itemTitle_Content"&gt; &lt;td class="myOrder_pic"&gt; &lt;img src="https://gw.alicdn.com/bao/uploaded/i1/3283306745/O1CN01zQkMM91zhFyyBNHDj_!!0-item_pic.jpg" width="80px" height="80px"&gt; &lt;/td&gt; &lt;td class="myOrder_desc"&gt; &lt;div class="myOrder_ItemProductLinkOuterDiv"&gt; &lt;a href="#"&gt;影巨人蓝牙耳机无线耳塞式双耳苹果X通用&lt;/a&gt; &lt;div class="myOrder_ItemProductLinkInnerDiv"&gt; &lt;img title="支持信用卡支付" src="http://how2j.cn/tmall/img/site/creditcard.png"&gt; &lt;img title="消费者保障服务,承诺7天退货" src="http://how2j.cn/tmall/img/site/7day.png"&gt; &lt;img title="消费者保障服务,承诺如实描述" src="http://how2j.cn/tmall/img/site/promise.png"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td class="myOrder_price"&gt; &lt;p&gt;￥88.00&lt;/p&gt; &lt;/td&gt; &lt;td class="myOrder_amount"&gt; &lt;div&gt; 1 &lt;/div&gt; &lt;/td&gt; &lt;td class="myOrder_sum"&gt; &lt;div class="orderListItemProductRealPrice"&gt; ￥88.00 &lt;/div&gt; &lt;div class="orderListItemPriceWithTransport"&gt; (含运费：￥0.00) &lt;/div&gt; &lt;/td&gt; &lt;td class="myOrder_confirm" sit="evaluation"&gt; &lt;a href="#nowhere"&gt; &lt;button class="orderListItemReview btn btn-primary"&gt;评价&lt;/button&gt; &lt;/a&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt;&lt;/div&gt; 交互商品选项选中浮现框 思路： 添加hover即可。 删除操作（待更新） 标题标签点击切换 思路： 点击标题栏触发点击，根据自定义的属性值判断是什么要求，将满足要求的商品项显示，不满足的隐藏，同时将相应的标题栏选项的下边框和字体改变颜色。 关键： 可以用的显示/隐藏：display, hide(), show()，fadeIn()，fadeOut()； 自定义属性：属性值用字符串时要注意选择元素时，选择器中&quot;+attribute_name+&quot;，使用字符串和转换的变量都会出错； 修改CSS：jQuery的css()方法，原生JavaScript的style.cssText属性。 扩展： 没有做点击按钮之后的页面，其实可以加上点击按钮之后显示的页面，完善订单页的功能； 其他链接：商品的链接，商城链接，旺旺商家链接等等。]]></content>
      <categories>
        <category>技术</category>
        <category>个人项目</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 学习笔记]]></title>
    <url>%2F2019%2F05%2F03%2FjQuery-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[简介安装jQuery下载官网 jquery.com CDN百度1234&lt;head&gt;&lt;script src="https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"&gt;&lt;/script&gt;&lt;/head&gt; 新浪1234&lt;head&gt;&lt;script src="https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js"&gt;&lt;/script&gt;&lt;/head&gt; jQuery 语法基础语法是：$(selector).action() 美元符号定义 jQuery 选择符（selector）“查询”和“查找” HTML 元素 jQuery 的 action() 执行对元素的操作 window.onload和$(document).ready()由于脚本由上到下解释，如果script在元素前面，则需要使用onload或者ready，告诉引擎在页面加载完成后才运行script内容。 这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。 如果在文档没有完全加载之前就运行函数，操作可能失败。 原生JavaScript：12345678910111213&lt;script type="text/javascript"&gt; window.onload = function() &#123; var vanish = document.getElementsByTagName("p"); var oBtn = document.getElementsByTagName("button"); oBtn[0].onclick = function() &#123; var length = vanish.length; for (var i = 0; i &lt; length; ++ i) &#123; vanish[i].innerHTML = ""; &#125; &#125; &#125;&lt;/script&gt; 使用jQuery（更加方便简洁）：1234567&lt;script type="text/javascript"&gt; $(document).ready(function() &#123; $("button").click(function() &#123; $("p, h2").hide(); &#125;); &#125;);&lt;/script&gt; 这里的body：1234&lt;h2 class="test"&gt;This is a heading&lt;/h2&gt;&lt;p class="test"&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is another paragraph.&lt;/p&gt;&lt;button id="f" type="button"&gt;Click me&lt;/button&gt; 注意： 如果没有使用onload或者ready，会使得script执行过早，出现操作错误。12test3.html:19 Uncaught TypeError: Cannot set property &apos;onclick&apos; of undefined at test3.html:19 补充： jQuery入口函数：1234567$(document).ready(function()&#123; // 执行代码&#125;);或者$(function()&#123; // 执行代码&#125;); JavaScript入口函数：123window.onload = function () &#123; // 执行代码&#125; jQuery 入口函数与 JavaScript 入口函数的区别： jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。 JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。 jQuery 选择器jQuery 元素选择器jQuery 使用CSS 选择器来选取 HTML 元素。 $(“p”) 选取 元素。 $(“p.intro”) 选取所有 class=”intro” 的 元素。 $(“p#demo”) 选取所有 id=”demo” 的 元素。 jQuery 属性选择器jQuery 使用XPath 表达式来选择带有给定属性的元素。 $(“[href]”) 选取所有带有 href 属性的元素。 $(“[href=’#’]”) 选取所有带有 href 值等于 “#” 的元素。 $(“[href!=’#’]”) 选取所有带有 href 值不等于 “#” 的元素。 \$(“[href\$=’.jpg’]”) 选取所有 href 值以 “.jpg” 结尾的元素。 jQuery CSS选择器使用原生JavaScript改变内联样式：12var temp = document.getElementsByTagName('p');temp[0].style.cssText = "background: red;"; jQuery CSS 选择器可用于改变 HTML 元素的 CSS 属性。 1$("p").css("background-color", "red"); 注意： 属性名可加&quot;&quot;可不加，要使用驼峰法如下：1$("p").css(bakcgroundColor, "red"); jQuery 事件$名称冲突jQuery 使用 $ 符号作为 jQuery 的简介方式。 某些其他 JavaScript 库中的函数（比如 Prototype）同样使用 $ 符号。 jQuery 使用名为noConflict() 的方法来解决该问题。 var jq=jQuery.noConflict()，帮助您使用自己的名称（比如 jq）来代替 $ 符号。123456 $.noConflict(); jQuery(document).ready(function()&#123; jQuery("button").click(function()&#123; jQuery("p").text("jQuery 仍在运行！"); &#125;);&#125;); 12345678910111213$.noConflict();var sb = jQuery.noConflict();sb(document).ready(function() &#123; // $("button").click(function() &#123; // $("p, h2").hide(); // &#125;); sb("button")[0].onclick = function() &#123; sb("p").css("color", "red"); var temp = document.getElementsByTagName('p'); temp[0].style.cssText = "background: red;"; sb("p:not(.test)").css("color", "blue"); &#125;&#125;); jQuery 效果隐藏/显示hide()和show()$(selector).hide(speed,callback); $(selector).show(speed,callback); 可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。(注意加””) 可选的 callback 参数是隐藏或显示完成后所执行的函数名称。 例子 对于body：12345678910111213141516&lt;h3&gt;中国&lt;/h3&gt;&lt;button class="show"&gt;显示&lt;/button&gt;&lt;div class="outer"&gt; &lt;button class="hide"&gt;隐藏&lt;/button&gt; &lt;p&gt;联系人： 张先生 &lt;br /&gt; 北三环中路100号 &lt;br /&gt; 北京&lt;/p&gt;&lt;/div&gt;&lt;h3&gt;美国&lt;/h3&gt;&lt;div class="outer"&gt; &lt;button class="hide"&gt;隐藏&lt;/button&gt; &lt;p&gt;联系人： 张先生 &lt;br /&gt; 北三环中路100号 &lt;br /&gt; 北京&lt;/p&gt;&lt;/div&gt; script：1234567891011$(document).ready(function() &#123; $("button.hide").click(function() &#123; $(this).parent(".outer").hide(1000, showB()); &#125;);&#125;);function showB() &#123; $("button.show").click(function()&#123; $("button.show+div").show(1000); &#125;);&#125; 可以看出，要实现显示隐藏之后的元素，隐藏已显示的元素，只靠hide()和show()十分的不方便。 于是就有了toggle(). toggle()来回切换hide()和show()，通过一个按钮，显示被隐藏的元素，隐藏已显示的元素。123$("button").click(function()&#123; $("p").toggle();&#125;); 语法：$(selector).toggle(speed,callback); 淡入淡出 fadeIn() 显示被隐藏的元素（display: none） fadeOut() fadeToggle() fadeTo() 语法：$(selector).fadeIn/Out/Toggle(speed,callback);$(selector).fadeTo(speed,opacity,callback); hide和show其实是对display进行设置，fading方法中的in和out和hide/show可以混用。 不过 某些效果不一样。 滑动 slideDown() slideUp() slideToggle() 比较显示/隐藏、fading、滑动 toggle(): fadeToggle(): slideToggle(): 动画animate()语法$(selector).animate({params},speed,callback); 必需的 params 参数定义形成动画的 CSS 属性。 例子123 $("button").click(function()&#123; $("div").animate(&#123;left:'250px'&#125;);&#125;); 注意属性名字使用驼峰命名法，属性值用&quot;&quot;括起来。如：marginTop: ‘100px’。 操作多个属性操作多个属性可用逗号分开：12345678$("button").click(function()&#123; $("div").animate(&#123; left:'250px', opacity:'0.5', height:'150px', width:'150px' &#125;);&#125;); 使用相对值可以定义相对当前元素的值：123456$(document).ready(function() &#123; $("button").click(function() &#123; $("p").animate(&#123;left: "+=300px"&#125;, "slow"); $("p").animate(&#123;fontSize: "+=20px"&#125;, "slow"); &#125;);&#125;); 使用预定义的值可以把属性的动画值设置为 &quot;show&quot;、&quot;hide&quot; 或 &quot;toggle&quot;：12345$("button").click(function()&#123; $("div").animate(&#123; height:'toggle' &#125;);&#125;); 动画队列功能对同一个选择内容进行前后顺序的动画。 写多个animate()调用，jQuery会创建包含这些调用的“内部”队列，逐一运行，有先后顺序。123456$(document).ready(function() &#123; $("button").click(function() &#123; $("p").animate(&#123;left: "+=300px"&#125;, "slow"); $("p").animate(&#123;fontSize: "+=20px"&#125;, "slow"); &#125;);&#125;); 如上为：先向右平移300px，然后字体变大20px。 可先把选择器赋值到变量，便于操作：123var pp = $("p");$("p").animate(&#123;left: "+=300px"&#125;, "slow");$("p").animate(&#123;fontSize: "+=20px"&#125;, "slow"); 不同选择内容如果对不同的选择内容添加多个动画animate()，则他们是同时进行的，而不是依次进行。 stop()语法： $(selector).stop(stopAll,goToEnd); 可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。 可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。 因此，默认地，不带参数时，stop() 会清除在被选元素上指定的当前动画，意思是：清楚当前动画队列上的第一个动画。 注意动画队列的概念思想 ChanningjQuery允许在一条语句把多个方法链接起来（在相同元素上）。 做法：直接连在后面添加即可，执行有先后顺序。 例子：1$("#p1").css("color","red").slideUp(2000).slideDown(2000); 或者123$("#p1").css("color","red") .slideUp(2000) .slideDown(2000); jQuery HTML获取和设置内容 text() - 设置或返回所选元素的文本内容 html() - 设置或返回所选元素的内容（包括 HTML 标记） val() - 设置或返回表单字段的值 无参数时返回相应的值，有参数时设置内容：123456789$("#btn1").click(function()&#123; $("#test1").text("Hello world!");&#125;);$("#btn2").click(function()&#123; $("#test2").html("&lt;b&gt;Hello world!&lt;/b&gt;");&#125;);$("#btn3").click(function()&#123; $("#test3").val("Dolly Duck");&#125;); 获取和设置属性 attr() 获取属性值：1$("#test1").attr("href") 设置属性值：1$("#test1").attr("href", "https://shaohuahua.top") 设置多个属性值：1234$("#test1").attr(&#123; "href": "https://shaohuahua.top", "title": "test"&#125;); 注意： animate()和css()中的属性名用&quot;&quot;括起来时使用的是样式表中的名字，如果不用&quot;&quot;，则用驼峰法命名。attr()中的属性名必须用&quot;&quot;括起来。 添加新的HTML内容 append() - 在被选元素的结尾插入内容 prepend() - 在被选元素的开头插入内容 after() - 在被选元素之后插入内容 before() - 在被选元素之前插入内容 添加单个例子：123$("p").prepend("Some prepended text.");$("ol").prepend("&lt;li&gt;Prepended item&lt;/li&gt;");$("p").prepend("&lt;b&gt;Prepended text&lt;/b&gt;. "); 其他三种方法相类似，这里都是使用text/HTML的方式创建新元素。&quot;&quot;内的内容相当于直接写在HTML中 添加若干个实际上，这四种方法可以通过参数接收无限数量的新元素。新元素可以通过 text/HTML jQuery JavaScript/DOM三种方式创建。 例子：12345678function appendText()&#123;var txt1="&lt;p&gt;Text.&lt;/p&gt;"; // 以 HTML 创建新元素var txt2=$("&lt;p&gt;&lt;/p&gt;").text("Text."); // 以 jQuery 创建新元素var txt3=document.createElement("p"); // 以 DOM 创建新元素txt3.innerHTML="Text.";$("p").append(txt1,txt2,txt3); // 追加新元素&#125; 删除 remove() 删除被选元素及其子元素 empty() 删除被选元素的子元素——清空 remove(“params”) 可接收一个参数，参数可为任何jQuery选择器的语法，删除满足条件的元素——过滤 CSS 类 addClass() - 向被选元素添加一个或多个类 removeClass() - 从被选元素删除一个或多个类 toggleClass() - 对被选元素进行添加/删除类的切换操作 css() - 设置或返回样式属性 例子：1234$("button").click(function()&#123; $("h1,h2,p").addClass("blue"); $("div").addClass("important");&#125;); 可以通过预先设置CSS样式，然后用jQuery添加到元素中。 尺寸 width() 设置/返回元素宽度（不包括内边距、边框和外边距） height() 设置/返回元素高度（不包括内边距、边框和外边距） innerWidth() 设置/返回元素宽度（不包括边框和外边距） innerHeight() 设置/返回元素高度（不包括边框和外边距） outerWidth() 返回元素的宽度（包括内边距和边框） outerHeight() 返回元素的高度（包括内边距和边框） outerWidth(true)和outerHeight(true) 返回包括内边距、边框和外边距。 设置时参数使用数字即可：123$("button").click(function()&#123; $("#div1").width(500).height(500);&#125;); 遍历通过遍历方法可以选取任何HTML元素。 祖先（向上遍历）通过jQuery，可以很方便的向上遍历DOM树，查找元素的祖先。 parent()返回直接父元素 例子：1234567$(function() &#123; var x = $("span").parent(); x.css(&#123; color: "red", border: "2px solid red" &#125;);&#125;); parents()返回所有祖先元素。 可以添加参数，返回指定元素的祖先元素。 参数是CSS选择器，十分灵活。 例子：1234567$(function() &#123; var x = $("span").parents("div"); x.css(&#123; color: "red", border: "2px solid red" &#125;);&#125;); parentsUntil()给定参数，返回两个给定元素之间的祖先元素。 例子：1234567$(function() &#123; var x = $("span").parentsUntil("div"); x.css(&#123; color: "red", border: "2px solid red" &#125;);&#125;); 后代（向下遍历）children()children() 方法返回被选元素的所有直接子元素。 该方法只会向下一级对 DOM 树进行遍历。 可以使用参数过滤对子元素的搜索。 例子：1234567$(function() &#123; var x = $("div").parents("p.test"); x.css(&#123; color: "red", border: "2px solid red" &#125;);&#125;); find(params)find() 方法返回被选元素的后代元素，一路向下直到最后一个后代，即所有选定的子孙。 注意： find(params)必须要有参数。 123$(document).ready(function()&#123; $("div").find("span");&#125;); 如要返回所有子孙，使用选择器*：123$(document).ready(function()&#123; $("div").find("*");&#125;); 兄弟（水平遍历） siblings() 返回被选元素的所有兄弟元素。 123$(document).ready(function()&#123; $("h2").siblings();&#125;); 可以使用``参数``过滤。 123$(document).ready(function()&#123; $("h2").siblings("p");&#125;); next()返回被选元素之后的一个兄弟元素。 注意：不可以使用参数过滤。 nextAll() 返回被选元素之后的``所有``兄弟元素。 **注意：**不可以使用``参数``过滤。 nextUntil() 返回被选元素``和指定元素之间``的兄弟元素。 prev() prevAll() prevUntil() 以上三种方法和next相类似，只是方向相反。 过滤三个最基本的过滤方法是：first(), last() 和 eq()，它们允许您基于其在一组元素中的位置来选择一个特定的元素。 first() 返回被选元素的首个元素 last() 返回被选元素的最后一个元素 eq(n) 返回指定索引号的元素，n从0开始 filter() 返回符合要求的元素 not() 返回不匹配标准的所有元素，与filter()相反 参考：jQuery W3school]]></content>
      <categories>
        <category>技术</category>
        <category>jQuery</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+github pages搭建个人博客]]></title>
    <url>%2F2019%2F04%2F29%2FHexo-github-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1. 准备工作本文所使用环境： Windows10 git@2.21.0 nodejs@10.15.3 hexo-cli@1.1.0 下面分别进行各个部分的安装配置。 1.1 安装git在Windows上使用Git，可以从Git官网直接下载安装程序，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！安装完成后，还需要最后一步设置，在命令行输入（$表示在gitbash中输入）：12$ git config --global user.name "你的名字"$ git config --global user.email "email@example.com" 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。 注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 关于git的具体操作可以参照 廖雪峰Git教程 1.2 安装nodejsNode.js安装包以及源码下载地址为：https://nodejs.org/en/download/。下载LTS版本一步步点击确认即可。配置环境变量之后，打开命令行cmd，显示如下画面即安装成功： 1.3 安装NPMNPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，适用于如下情况： 允许用户从NPM服务器下载别人编写的第三方包到本地使用。 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 显示如下画面则配置成功。由于众所周知的原因，npm指令官方镜像是非常慢的，这里推荐使用淘宝NPM镜像。 淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。 你可以使用淘宝定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 这样就可以使用 cnpm 命令来安装模块了：1$ cnpm install [name] 更多关于nodejs可前往 菜鸟教程 1.4 安装Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 使用npm或者cnpm安装：1$ npm install -g hexo-cli 显示如下表示安装成功： 执行以下指令安装 hexo 部署到 git page 的 deployer：1$ npm install hexo-deployer-git --save 安装 Hexo 完成后，在磁盘找个位置新建一个文件夹，这里是你的博客所有文件存放的文件夹，之后右键打开gitbash执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install folder为你的博客文件夹的名称，我这里是myblog，执行过程如下：新建完成后，指定文件夹的目录如下： .├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 执行以下命令，执行完即可登录 http://localhost:4000/ 查看效果：12$ hexo generate 或者 hexo g $ hexo server 或者 hexo s 显示以下信息说明操作成功：1INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 2. 部署hexo到github pages2.1 关于github pages2.2 创建仓库熟手可以直接跳过了。 打开github右上角创建新仓库:将仓库的名字设置成自己github帐号的名字，必须一模一样，每个帐号只有一个github pages: 2.2 绑定域名（可跳过）现在我们可以通过访问 yourname.github.io 这个网址来进入到我们的githubpages，这就是我们的网站地址了，当然你可以直接使用这个网址，不过这个网址怎么说也太难记太没有个性，接下来我们将使用DNS把这个网址解析到一个我们想要的个性域名上。 首先我们要有一个域名可以去 阿里云、腾讯云申请一个域名，我申请的是.top的域名，价格比较便宜。顺便打广告：点击进入我的博客根据自己的喜好和富有程度购买一个域名，之后我们怎么才能通过这个域名访问到我们的网站呢？ 将域名和github绑定进入阿里云解析平台，来到阿里云的管理控制台，选择自己购买的域名，点击解析： 进入后设置两个：A和CNAME，按照图中设置即可，是为了我们访问带www和不带www时都能解析到我们的githubpages网址。CNAME的记录值填自己刚刚创建的仓库的地址，A的记录值为仓库地址的IP地址。（仓库IP可以通过cmd命令行ping yourname.github.io获得）注意：可能需要实名认证，要确保域名解析状态正常和认证成功，否则无法正常访问域名（当时我就是这里跳进了大坑，等了半天都没有成功解析）。 然后返回github，打开刚刚创建的仓库，进入settings：在如下位置输入购买的域名： 等待几分钟，在浏览器输入自己的域名就可以成功访问到github pages啦~ 到此个性域名绑定完成。 2.3 配置SSH key到目前为止，我们有了： hexo搭建的本地博客 github pages提供的网站服务器 我们怎么把博客和github关联起来呢？这就需要用到ssh和git了。 ==为什么要配置SSH？== 因为本地Git仓库和GitHub仓库之间的传输是通过SSH加密的 只有配置好 SSH 密钥后，我们才可以通过git操作实现本地代码库与 Github 代码库同步。 第1步：任何地方 Git Bash 输入以下命令（引号里填的是你的邮箱地址）：1$ ssh-keygen -t rsa -C "your email@example.com" 之后会出现：123Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): //到这里可以直接回车将密钥按默认文件进行存储 然后会出现：123Enter passphrase (empty for no passphrase): //这里是要你输入密码，其实不需要输什么密码，直接回车就行 Enter same passphrase again: 接下来屏幕会显示：123456Your identification has been saved in /c/Users/you/.ssh/id_rsa. Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub. The key fingerprint is: 这里是各种字母数字组成的字符串，结尾是你的邮箱 The key's randomart image is: 这里也是各种字母数字符号组成的字符串 你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面： 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：点“Add Key”，你就应该看到已经添加的Key。 ==为什么GitHub需要SSH Key呢？== 因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。 当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。 测试是否成功git bash中输入指令：1$ ssh -T git@github.com 说明配置成功。 2.4 上传到github配置_config.yml如果你一切都配置好了，发布上传很容易，一句hexo g &amp;&amp; hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分（这个_config.yml是hexo的，之后theme中也有个_config.yml）： 正确写法：1234deploy: type: git repository: git@github.com:ZhuangXuward/ZhuangXuward.github.io.git branch: master 如果出现错误，可能是由于deploy相关的包没有安装成功，git bash中输入：1$ npm install hexo-deployer-git --save CNMAE文件在本地你的博客文件夹中，找到source目录，在source目录下新建一个名为CNAME的无后缀文件（可以记事本打开，另存为所有文件），内容是你的域名（不含www），如下图：之后输入指令：123$ hexo clean$ hexo generate$ hexo deploy 打开你的域名，就可以发现你的githubpages显示出来啦~ 3. 发表新文章3.1 markdown使用由于hexo编写博客使用的是markdown语法，保存的文件也是md文件，所以我们需要学习md语法。markdown语法有很多，这里就不提供啦，自行百度即可。 3.2 常用命令1234567hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 可缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令：12hexo s -g #生成并本地预览hexo d -g #生成并上传 3.3 写博客找到我们的博客的文件夹，也就是hexo根目录，git bash：1hexo new 'Hexo+giuhub pages搭建个人博客' 之后就会在source的_post下生成md文件：之后打开这个md文件（可以使用sublime打开）：在其中编写博客：之后回到git bash，输入指令：1$ hexo g 等待一段时间，我们的静态页面就生成了：再输入：1$ hexo d 把本地的静态页面部署到我们的github远程仓库，等待完成后看到deploy done: git，就表示部署成功了。再打开我们的网站，就可以看到新创建的博客啦：平时也可以通过本地静态页面来进行修改，因为没有deploy到服务器，这样就相当于打草稿：12$ hexo d$ hexo s 之后打开http://localhost:4000/就可以看到本地静态页面了。 4. 更换主题这时你就会问，能不能换一个主题呢？这个主题不喜欢啊！ 当然可以！ 4.1 获得&amp;&amp;下载主题首先官方就有很多主题可以下载：Hexo官方。 找到一个喜欢的主题点进去，主题介绍页面都会有详细说明，按照说明一步步走就没什么问题了。比如：安装12$ cd your_blog_dir$ git clone https://github.com/kinggozhang/hexo-theme-ace.git themes/ace 4.2 配置主题_config.yml这时博客文件夹的theme中应该会出现一个新的文件夹，这就是你刚刚下载clone的新主题。 找到博客的_config.yml（不是theme中的），修改theme为当前主题的名字。 之后进入theme中选中你的主题，进入主题中的_config.yml，在里面进行更多细节的设置。 一般情况下都会有很详细的注释，按照自己的需求修改即可。 5. 更多细节&amp;参考搭建过程 小茗同学的博客园：使用hexo+github搭建免费个人博客详细教程 TRHX：使用Github Pages和Hexo搭建自己的独立博客【超级详细的小白教程】 sufaith：GitHub+Hexo 搭建个人网站 Fangzh：hexo教程：github page+独立域名搭建(1) 廖雪峰Git教程 美化细节 Hexo官方文档 valine博客评论系统 TRHX：Hexo 博客优化之博客美化]]></content>
      <categories>
        <category>技术</category>
        <category>个人博客搭建</category>
      </categories>
      <tags>
        <tag>个人博客</tag>
        <tag>github pages</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git相关]]></title>
    <url>%2F2019%2F04%2F19%2FGit%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[创建仓库git init初始化git仓库 添加文件和上传修改文件把文件往git版本库里添加时，分两步进行： 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区； 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 git add filename1 filename2 ...添加文件，可以一次添加多个。 git commit -m &quot;message&quot;提交到仓库，message为这次提交的描述语句。 查看状态和diff git status git diff 版本回退 git log git reset --hard commit_id git reflog HEAD表示当前版本，上一个版本为HEAD\^，上上个为HEAD\^\^， 以此类推，也可以使用HEAD~1表示上一个，数字可变。 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 工作区和暂存区原理图：详情看廖雪峰git教程。 管理修改 git diff 比较工作区和stage暂存区文件差别 git diff head filename 比较工作区和版本库文件差别 git diff --cached 比较版本库和暂存区文件差别 撤销修改场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。 删除 如果你用的rm删除文件，那就相当于只删除了工作区的文件，如果想要恢复，直接用git checkout -- file就可以。 如果你用的是git rm删除文件，那就相当于不仅删除了文件，而且还添加到了暂存区，需要先git reset HEAD file，然后再git checkout -- file。 如果你想彻底把版本库的删除掉，先git rm，再git commit就ok了。 添加远程库要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git; 关联后，使用命令git push -u origin master第一次推送master分支的所有内容； 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改； 分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！git remote rm origin取消关联。 git pull指令有时候会出现你在github网页上添加了readme，而本地仓库没有改动的类似情况，这是Git push会出错，需要把远程仓库和本地branch同步：git pull origin master。同时，也可以使用以上指令查看远程仓库是否有改动，并pull进本地仓库，如下图：显示有修改显示没有修改 创建并合并分支Git鼓励大量使用分支： 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt;]]></content>
      <categories>
        <category>技术</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS实现垂直/水平导航栏]]></title>
    <url>%2F2019%2F04%2F11%2FCSS%E5%AE%9E%E7%8E%B0%E5%9E%82%E7%9B%B4-%E6%B0%B4%E5%B9%B3%E5%AF%BC%E8%88%AA%E6%A0%8F%2F</url>
    <content type="text"><![CDATA[1. 一级基本导航栏1.1 怎么显示？导航栏 = 链接列表 导航栏需要标准的 HTML 作为基础。在我们的例子中，将用标准的 HTML 列表来构建导航栏。导航栏基本上是一个链接列表，因此使用 ul 和 li 元素是非常合适的： 12345678910111213&lt;div id="nav"&gt; &lt;ul class="firstNav"&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单1&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单2&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单3&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt; 以上是标准的导航栏代码。 去掉list-style-type: 12345ul &#123; list-style-type: none; padding: 0; margin: 0;&#125; 1.2 垂直导航栏 display: block：把链接显示为块元素可使整个链接区域可点击（不仅仅是文本），同时也允许我们规定宽度。行内元素无法设置物理width。inline-block、block、inline分析 width: 140px：块元素默认占用全部可用宽度。我们需要规定 140 像素的宽度。 line-height：可以用来实现垂直居中效果。12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;导航栏&lt;/title&gt; &lt;style type="text/css"&gt; ul &#123; list-style-type: none; padding: 0; margin: 0; &#125; #nav&gt;ul&gt;li &#123; text-align: center; &#125; a &#123; display: block; /*垂直排列，且点击区域为方块*/ width: 100px; /*block可设置width*/ line-height: 40px; /*获得垂直居中效果*/ text-decoration: none; color: white; background-color: black; border: 1px solid white; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="nav"&gt; &lt;ul class="firstNav"&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单1&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单2&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单3&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 1.3 水平导航栏两种方法：行内元素(inline-block)和浮动(float) 行内元素 1234 #nav&gt;ul&gt;li &#123; text-align: center; display: inline-block;&#125; li默认是块内元素，前后有换行，设置成inline-block后，同时具有inline同行水平排列和block可以设置width等属性的特点。 不足：会有间隔，因为原本的block元素前后有换行，使用inline-block之后，元素之间会有间隔。如何解决看inline-block、block、inline分析。 浮动 1234#nav&gt;ul&gt;li &#123; text-align: center; float: left;&#125; float:left - 使用 float 来把块元素滑向彼此。可以发现，元素之间的间隔仅为设置的border的1px间隔，也就是浮动元素之间是紧挨着的，这点与inline-block区分开。不足：float会有副作用，需要设置clear:both清除浮动带来的可能的坍塌后果。 2. 二级导航栏2.1 垂直二级css:12345678910111213141516171819202122232425262728293031323334353637ul &#123; list-style-type: none; padding: 0; margin: 0; &#125; #nav&gt;ul&gt;li &#123; text-align: center; float: left; /*display: inline-block;*/ &#125; a &#123; display: block; /*垂直排列，且点击区域为方块*/ width: 100px; /*block可设置width*/ line-height: 40px; /*获得垂直居中效果*/ text-decoration: none; color: rgb(133, 119, 114); background-color: rgb(237, 237, 237); /*border: 1px solid white;*/ &#125; .firstNav::after &#123; content: ''; clear: both; &#125; .secondNav a &#123; background-color: rgb(237, 237, 237); border-bottom: 1px solid white; &#125; .secondNav &#123; display: none; &#125; .firstNav&gt;li:hover &gt;a&#123; background-color: rgb(101, 101, 101); color: white; &#125; .firstNav&gt;li:hover .secondNav &#123; display: block; &#125; 结构:12345678910111213141516171819202122232425262728&lt;div id="nav"&gt; &lt;ul class="firstNav"&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单1&lt;/a&gt; &lt;ul class="secondNav"&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单1.1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单1.2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单1.3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单2&lt;/a&gt; &lt;ul class="secondNav"&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单2.1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单2.2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单2.3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;a href="#"&gt;一级菜单3&lt;/a&gt; &lt;ul class="secondNav"&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单3.1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单3.2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;二级菜单3.3&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; 2.2 水平二级由于二级导航栏是水平的，要让多个li同行分布，按照水平基本导航栏的做法（1）float 或者（2）inline-block。注意一级导航要设置relative定位，二级导航设置absolute定位，否则会有错位情况发生。css改动:12345678910.firstNav &#123; position: relative;&#125;.secondNav &#123; display: none; position: absolute;&#125;.secondNav&gt;li &#123; float: left;&#125; 2.3 动画效果css改动：1234567891011.secondNav &#123; /*display: none;*/ position: absolute; opacity: 0; transition-property: opacity; transition-duration: 1s;&#125;.firstNav&gt;li:hover .secondNav &#123; /*display: block;*/ opacity: 1;&#125; 需要注意：如果display:none没有去掉，最后没有过渡效果，仍为瞬时显示。 3. 行内元素和块级元素的具体区别是什么？inline-block是什么？3.1 行内元素与块级元素的区别block 总在新的一行开始（换行） width、height以及padding、margin可设置 如果不设置width，默认为整个容器的100% 常用块元素：div、p、h1、form、ul、liinline 和其他元素同一行（不换行） 行高width、height和padding、margin不可设置（img除外，img可设置width、height） widht为文字或图片的宽度，不可改变 常用行内元素：span、a、label、input、imginline-block 和其他元素同一行（不换行） width、height、margin、padding可设置 默认底部在同一水平线，可使用vertical-align其他不同 行内元素会在一条直线上排列（默认宽度只与内容有关），都是同一行的，水平方向排列。块级元素各占据一行（默认宽度是它本身父容器的100%（和父元素的宽度一致），与内容无关），垂直方向排列。块级元素从新行开始，结束接着一个断行。 块级元素可以包含行内元素和块级元素。行内元素不能包含块级元素，只能包含文本或者其它行内元素。 行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置width无效，height无效(可以设置line-height)，margin上下无效，padding上下无效。 3.2 行内元素和块级元素转换display:block; (字面意思表现形式设为块级元素) display:inline; (字面意思表现形式设为行内元素) 3.3 inline-blockinline-block 的元素（如input、img)既具有 block 元素可以设置宽高的特性，同时又具有 inline 元素默认不换行的特性。当然不仅仅是这些特性，比如 inline-block 元素也可以设置 vertical-align（因为这个垂直对齐属性只对设置了inline-block的元素有效） 属性。HTML 中的换行符、空格符、制表符等合并为空白符，字体大小不为 0 的情况下，空白符自然占据一定的宽度，使用inline-block 会产生元素间的空隙。在导航栏中可设置水平导航，与float相比没有浮动副作用。]]></content>
      <categories>
        <category>技术</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>小练习</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript小练习4-鼠标移入移出改变样式]]></title>
    <url>%2F2019%2F04%2F10%2FJavaScript%E5%B0%8F%E7%BB%83%E4%B9%A04-%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%85%A5%E7%A7%BB%E5%87%BA%E6%94%B9%E5%8F%98%E6%A0%B7%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[题目移出：移入： 分析思路清晰，onmouseover和onmouseout的使用，注意的地方有： width和height设置的是content的内容，padding和border要注意设置，实现前后大小相同，就要让整个盒子大小一致，即border也进行设置。 cssText设置内联样式，cssText=””可清空内联样式。 之前没明白onload的作用，这次理解了，之前onload删去代码依旧正常，是因为script放在body中，body中内容是会执行的，而当script放在head中时，就需要onload让页面加载完成时执行script中的代码。 效果&amp;代码见预览]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>小练习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript小练习3-用循环使三个DIV变色]]></title>
    <url>%2F2019%2F04%2F10%2FJavaScript%E5%B0%8F%E7%BB%83%E4%B9%A03-%E7%94%A8%E5%BE%AA%E7%8E%AF%E4%BD%BF%E4%B8%89%E4%B8%AADIV%E5%8F%98%E8%89%B2%2F</url>
    <content type="text"><![CDATA[题目初始为黑色，点击后为红色，再次点击为黑色，以后每次点击一次变色。 分析 简单的onclick使用。 button的居中可以在外套一个p元素，body中让p居中即可。 三个DIV块的并排居中，外层大DIV使用margin和width，内层三个DIV也使用margin和width控制，注意margin的上下会重叠，但左右不重叠；并排用float实现。 实现多次点击变色，需要进行判断原色，注意一般的方法（ele.style./cssText）只能读取和修改内联样式，故第一次点击时无法访问到样式表中的黑色值。这里使用switch中的default解决。 效果&amp;代码效果：循环使DIV变色F12查看代码。]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>小练习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript小练习2-网页换肤]]></title>
    <url>%2F2019%2F04%2F10%2FJavaScript%E5%B0%8F%E7%BB%83%E4%B9%A02-%E7%BD%91%E9%A1%B5%E6%8D%A2%E8%82%A4%2F</url>
    <content type="text"><![CDATA[题目 分析三个皮肤切换按钮的选择 用li即可。 点击显示白点 li中嵌套一个li，onclick时改变子元素li的css onload 当页面加载完成后立即执行一段JavaScript代码。onload 属性在对象已加载时触发。onload 常用在”body”中，一旦完全加载所有内容（包括图像、脚本文件、CSS 文件等），就执行一段脚本。 在 HTML 中:1&lt;body onload="SomeJavaScriptCode"&gt; 在 JavaScript 中:1window.onload=function()&#123;SomeJavaScriptCode&#125;; 总结在怎么显示三个并排的换肤按钮和点击显示白点这两块纠结很久，一方面想要更优雅的实现不想用嵌套div，一方面又想学习小练习1中的循环遍历思想，所以花了很久时间。其实思路很清晰，自己能力还是需要大大加强，多练习。 疑问这里的onload不是很明白，代码中去掉onload显示是正常的，不知道这里的onload是否可有可无？ 代码效果：网页换肤123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;网页换肤&lt;/title&gt; &lt;link rel="shortcut icon" href="../icons/project.jpg"&gt; &lt;style type="text/css"&gt; body &#123; background-color: rgb(255, 221, 221); &#125; .main &#123; width: 500px; margin: 0 auto; &#125; button &#123; width: 12px; height: 12px; margin: 2px; padding: 0; outline: none; border: 0; text-align: center; &#125; #red &#123; background-color: red; &#125; #green &#123; background-color: green; &#125; #black &#123; background-color: black; &#125; #content &#123; margin-top: 5px; text-align: center; border-collapse: collapse; background-color: red; &#125; #content td &#123; width: 600px; height: 23px; border: 1px solid white; font-size: small; color: white; &#125; td:hover &#123; text-decoration: underline; cursor: pointer; &#125; li &#123; width: 4px; height: 4px; background-color: white; list-style-type: none; margin-left: 4px; display: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="main"&gt; &lt;button id="red" title="红色" class="current"&gt;&lt;li&gt;&lt;/li&gt;&lt;/button&gt; &lt;button id="green" title="绿色" &gt;&lt;li&gt;&lt;/li&gt;&lt;/button&gt; &lt;button id="black" title="黑色"&gt;&lt;li&gt;&lt;/li&gt;&lt;/button&gt; &lt;table id="content"&gt; &lt;tr&gt; &lt;td&gt;新闻&lt;/td&gt; &lt;td&gt;娱乐&lt;/td&gt; &lt;td&gt;体育&lt;/td&gt; &lt;td&gt;电影&lt;/td&gt; &lt;td&gt;音乐&lt;/td&gt; &lt;td&gt;旅游&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;p id="demotest"&gt;&lt;/p&gt; &lt;/div&gt; &lt;script&gt; var setTacolor = function(ccolor) &#123; var ta = document.getElementById("content"); ta.style.backgroundColor = ccolor; &#125; var setBacolor = function(ccolor) &#123; document.body.style.backgroundColor = ccolor; &#125; var oTa = document.getElementById("content"); var baColor = ["rgb(255, 221, 221)", "rgb(163, 197, 168)", "rgb(204, 204, 204)"] ; var taColor = ["red", "green", "black"]; var oBtn = document.getElementsByTagName("button"); var oLi = document.getElementsByTagName("li"); window.onload = function() &#123; for(var i = 0; i &lt; oBtn.length; ++ i) &#123; oBtn[i].index = i; oBtn[i].onclick = function() &#123; for(var j = 0; j &lt; oBtn.length; ++ j) &#123; j != this.index &amp;&amp; (oLi[j].style.display = "none"); &#125; oLi[this.index].style.display = "block"; setTacolor(taColor[this.index]); setBacolor(baColor[this.index]); &#125; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>小练习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript小练习1-控制div属性]]></title>
    <url>%2F2019%2F04%2F09%2FJavaScript%E5%B0%8F%E7%BB%83%E4%B9%A01-%E6%8E%A7%E5%88%B6div%E5%B1%9E%E6%80%A7%2F</url>
    <content type="text"><![CDATA[题目要实现的效果如图所示：查看演示 分析乍一看还以为十分简单，就是简单的点击button时触发的函数来改变样式值，不过做到后面就开始打脸了——“重置”功能。其实要实现重置功能，硬做还是可以的，就是cssText=“整个style表”，但是这么做太暴力了，十分不优雅，结果看了人家的源码真的是佩服的五体投地。 首先注意CSS的三种创建方式 内联样式/行内样式(inline style) 内部样式表(internal style sheet) 外部样式表(external style sheet) JS如何获取CSS样式 获取内联样式 12345678910111213&lt;div id ="myDiv" style="width:100px;height:100px;background-color:red; border:1px solid black;"&gt;&lt;/div&gt;&lt;script&gt; var myDiv = document.getElementById("myDiv"); alert(myDiv.style.width);//100px alert(myDiv.style['height']);//100px var style=myDiv.style; alert(style.backgroundColor);//red myDiv.style.backgroundColor='green';//myDiv背景色变为绿色 &lt;/script&gt; 这种情况下，获取和设置样式靠style属性就可以了，有ele.style.属性名称和ele.style[“属性名称”]两种方式。 要注意的是，对于CSS样式中的background-color等短杠连接的属性名称，在使用style获取属性设置样式的时候名称要改成驼峰式，即ele.style.backgroundColor或者ele.style[‘backgroundColor’]。 获取外联样式（内部/外部样式表）（待更新） ==也就是说，一般情况下，我们都只能访问和设置行内样式！访问外联样式需要其他方法实现。== cssText的用法用来设置行内样式。12ele.style.cssText="CSS样式表";//添加行内样式ele.style.cssText="";//可以清除行内样式 这次的小练习中用到了ele.style.cssText=””的用法来实现重置功能，这条语句只会清除行内样式，对样式表中设置的内容没有改动。 window.onload的使用方法window.onload加载事件在页面内容加载完成之后立即执行相应的函数。 使用方法：onclick有相同用法： obj.onclick = function() {//function body//} function func() {//function body//} obj.oncllick = func();&amp;&amp; 和 || 的特殊用法a() &amp;&amp; b() :如果执行a()后返回true，则执行b()并返回b的值；如果执行a()后返回false，则整个表达式返回a()的值，b()不执行； a() || b() :如果执行a()后返回true，则整个表达式返回a()的值，b()不执行；如果执行a()后返回false，则执行b()并返回b()的值； &amp;&amp; 优先级高于 ||。123alert((1 &amp;&amp; 3 || 0) &amp;&amp; 4); //结果4alert(1 &amp;&amp; 3 || 0 &amp;&amp; 4); //结果3alert(0 &amp;&amp; 3 || 1 &amp;&amp; 4); //结果4 附带优先级表 代码我的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;JavaScript Reading Test&lt;/title&gt; &lt;style type="text/css"&gt; .main &#123; margin: 30px; text-align: center; &#125; #rectangle &#123; width: 100px; height: 100px; margin: 20px auto; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="main"&gt; &lt;button&gt;变宽&lt;/button&gt; &lt;button&gt;变高&lt;/button&gt; &lt;button&gt;变色&lt;/button&gt; &lt;button&gt;隐藏&lt;/button&gt; &lt;button&gt;重置&lt;/button&gt; &lt;p id="rectangle"&gt;&lt;/p&gt; &lt;/div&gt; &lt;script&gt; function changeCss(oDiv, oAttr, oVal) &#123; oDiv.style[oAttr] = oVal; //变量访问样式属性，用ele.style['oAttr'] &#125; window.onload = function() &#123; var oBtn = document.getElementsByTagName("button"); var oDiv = document.getElementById("rectangle"); var oAttr = ["width", "height", "backgroundColor", "display", "display"]; var oVal = ["200px", "200px", "blue", "none", "block"]; alert() for(var i = 0; i &lt; oBtn.length; ++ i) &#123; oBtn[i].index = i;//注意！！ oBtn[i].onclick = function() &#123; //这里绑定的回调函数是匿名函数，不会执行，但是当事件发生调用函数时，循环已经结束了 if (this.index == 4) &#123; //内部引用自己用this，用oBtn[i]会报错 oDiv.style.cssText = ""; &#125; //简洁用法： // this.index == oBtn.length - 1 &amp;&amp; (oDiv.style.cssText = ""); changeCss(oDiv, oAttr[this.index], oVal[this.index]); &#125; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 必须使用oBtn[i].index = i，原因见代码注释。源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;style&gt;body&#123; text-align: center;&#125;div&#123; width: 100px; height: 100px; background: black; margin:20px auto;&#125;&lt;/style&gt;&lt;body&gt; &lt;input type="button" value="变宽" /&gt; &lt;input type="button" value="变高" /&gt; &lt;input type="button" value="变色" /&gt; &lt;input type="button" value="隐藏" /&gt; &lt;input type="button" value="重置" /&gt; &lt;div id="div1"&gt;&lt;/div&gt; &lt;script&gt; var changeStyle = function (elem, attr, value)&#123; elem.style[attr] = value; &#125;; window.onload = function ()&#123; var oBtn = document.getElementsByTagName("input"); var oDiv = document.getElementById("div1"); var oAtt = ["width","height","background","display","display"]; var oVal = ["200px","200px","red","none","block"]; for (var i = 0; i &lt; oBtn.length; i++)&#123; oBtn[i].index = i; oBtn[i].onclick = function ()&#123; this.index == oBtn.length - 1 &amp;&amp; (oDiv.style.cssText = ""); changeStyle(oDiv, oAtt[this.index], oVal[this.index]) &#125; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结这一次的小练习提升的知识点： 使用对象/数组遍历访问的思想； cssText用法，内联样式的访问和设置； &amp;&amp; 和 || 的特殊用法； window.onload=function(){}; this初步了解； 闭包和作用域的初步接触；]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>小练习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS、JavaScript学习过程]]></title>
    <url>%2F2019%2F04%2F06%2FCSS%E3%80%81JavaScript%E5%AD%A6%E4%B9%A0%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[初学JavaScript，通过博客记录自己学习过程中遇到的问题。（包含少量CSS） 零碎记录JavaScript 输出 type=”text/javascript”那些老旧的实例可能会在 &lt;script&gt; 标签中使用 type=”text/javascript”。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。 脚本位置在 &lt;head&gt; 或者 &lt;body&gt; 的JavaScript外部脚本不能包含 &lt;script&gt; 标签。 输出数据window.alert() 弹出警告框。document.write() 方法将内容写到 HTML 文档中。innerHTML 写入到 HTML 元素。console.log() 写入到浏览器的控制台。 输出内容使用 document.write() 向文档输出写内容。如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖 写到控制台（调试模式）使用 console.log() 方法在浏览器中显示 JavaScript 值。F12 启用调试模式， 在调试窗口中点击 “Console” 菜单。提示：JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。局部、全局变量| 变量 | 含义 || :–: | :–: || 局部变量 | 在函数中通过var声明的变量 || 全局变量 | 在函数外通过var声明的变量 || 没有声明就使用的变量 | 默认为全局变量，不论这个变量在哪被使用(不推荐) | 几种点击显示 直接在标签中添加onclick=”function()” 1234//body&lt;button id="demo2" onclick="demo22()"&gt;click me!&lt;/button&gt;//两者选其一&lt;input type="button" id="demo2" onclick="demo22()" value="clike me!"&gt;//两者选其一&lt;p id="demoadd2"&gt;&lt;/p&gt; input和button标签的使用，input中type为button时和button的显示是一样的。 1234//scriptfunction demo22() &#123; document.getElementById("demoadd2").innerHTML="hhh";&#125; addEventListener(“click”, function(){}) 12&lt;input type="button" id="demo" value="clike me!"&gt;&lt;p id="demoadd"&gt;&lt;/p&gt; 123document.getElementById("demo").addEventListener("click", function() &#123; document.getElementById("demoadd").innerHTML="hhh";&#125;); 在script中： 1ele.onclick = function() &#123;//function body&#125; 效果如下： 常见HTML事件| 事件 | 描述 || :-: | :-: || onchange | HTML 元素改变 || onclick | 用户点击HTML元素 || onmouseover | 在一个HTML元素上移动鼠标 || onmouseout | 在一个HTML元素上移开鼠标 || onkeydown | 用户按下键盘按键 || onload | 浏览器已完成页面的加载 | shadow相关1box-shadow: 0 2px rgb(231, 106, 61);//前面的0表示了x和y的距离。即0 0 2px rgb(); outlineoutline（轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，起到突出作用。可设置如下属性（不需要按顺序）： outline-color outline-style outline-widthoutline:none可用于清楚input输入框点击时外围的蓝色框。1234p &#123;border:red solid thin;outline:#00ff00 dotted thick;&#125; transform -ms-transform:rotate(7deg); / IE 9 / -webkit-transform:rotate(7deg); / Safari and Chrome / transform:rotate(7deg); 还可以特定方向旋转变换：X、Y等。更多骚气变换=== 表示绝对相等，即数据类型与值都相等。 不包含类classname的元素item选择器 p:not(.classname) HTML使用#符合设置固定链接（不是很懂？） 有时你想要在你的网站上添加一个 a 元素，但你还不知道将它链接到哪里，这时你可以使用固定连接。当你使用 jQuery 更改链接的行为时，这也很方便，我们稍后将会了解。把 a 元素的 href 属性的值替换为一个 # （# 也称为哈希符号），将其转换为一个固定链接。 六个getElement函数123456getElementById(); //返回指定 ID 的元素getElementsByTagName(); //返回指定标签的元素 +sgetElementsByName(); //返回指定name的元素 +sgetElementsByClassName(); //返回指定CLASS的元素 +sgetAttribute(); //获得属性值setAttribute(); //设置属性值 方法getElementsByxx()与 getElementById() 方法相似，但返回值不同，因为一个文档中的 name 属性或标签或类可能不唯一（如 HTML 表单中的单选按钮通常具有相同的 name 属性），所有 getElementsByxx() 方法返回的是元素的数组，而不是一个元素。 input中placeholder和value的区别 placeholder中的内容显示在输入框中，点击输入框文字消失；value中的内容同样显示在输入框中，点击输入框文字不消失。 innerHTML innerHTML属性设置或返回表格行的开始和结束标签之间的 HTML。1234567891011121314151617181920212223242526&lt;html&gt;&lt;head&gt;&lt;script type="text/javascript"&gt;function getInnerHTML() &#123; alert(document.getElementById("tr1").innerHTML); &#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;table border="1"&gt;&lt;tr id="tr1"&gt;&lt;th&gt;Firstname&lt;/th&gt;&lt;th&gt;Lastname&lt;/th&gt;&lt;/tr&gt;&lt;tr id="tr2"&gt;&lt;td&gt;Peter&lt;/td&gt;&lt;td&gt;Griffin&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br /&gt;&lt;input type="button" onclick="getInnerHTML()" value="Alert innerHTML of table row" /&gt;&lt;/body&gt;&lt;/html&gt; Date()1var n=new Date().getDay();//获取当前日期的星期，星期天为0，类推。 循环包括for/while/dowhile/forin，其他都比较熟悉，这里只说for/in：For/in 循环，循环遍历对象的属性。12345var person=&#123;fname:"John",lname:"Doe",age:25&#125;; for (x in person) // x 为属性名&#123; txt=txt + person[x];&#125; break和continue 标签使用： 标记JavaScript语句，在语句前加上冒号：label: statements break和continue使用标号：break labelname;continue labelname; 带不带标签 出现范围 continue 语句（带有或不带标签引用） 只能用在循环中 break 语句（不带标签引用） 只能用在循环或 switch 中 break 语句（带标签引用） 可用于跳出任何 JavaScript 代码块 typeof typeof操作符检测变量的数据类型在JavaScript中，数组是一种特殊的对象类型。 因此 typeof [1,2,3,4] 返回 object。 null和undefined1234typeof undefined // undefinedtypeof null // objectnull === undefined // falsenull == undefined // true 均可用来清空变量。 null表空对象引用，用于清空对象。 undefined是一个没有设置值的变量，任何没有设置值的变量的类型都是undefined，故任何值都可以用undefined清空，清空之后类型为undefined。 JavaScript数据类型类型转换 Number() String() Boolean()5种数据类型： number string boolean object function3种对象类型 Date Array Object2个不包含任何值的数据类型 null undefined注意 NaN 的数据类型是 number 数组(Array)的数据类型是 object 日期(Date)的数据类型为 object null 的数据类型是 object 未定义变量的数据类型为 undefined 如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 typeof 来判断他们的类型，因为都是返回 object。但可以使用constructor判断，见下条。 constructor属性 constructor返回所有JavaScript变量的构造函数。 12345678910&lt;p&gt;判断是否为数组。&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt; var fruits = ["Banana", "Orange", "Apple", "Mango"]; document.getElementById("demo").innerHTML = isArray(fruits); function isArray(myArray) &#123; return myArray.constructor.toString().indexOf("Array") &gt; -1; //toString()方法将构造函数强制转换成string，indexOf("Array")查找字串中"Array"。 &#125;&lt;/script&gt; 123456789&lt;p&gt;判断是否为日期。&lt;/p&gt;&lt;p id="demo"&gt;&lt;/p&gt;&lt;script&gt; var myDate = new Date(); document.getElementById("demo").innerHTML = isDate(myDate); function isDate(myDate) &#123; return myDate.constructor.toString().indexOf("Date") &gt; -1; &#125;&lt;/script&gt; Number类型 浮点数保存浮点数值需要的内存空间是整数值的两倍，所以ECMAScript会不失时机地将浮点数值转换为整数值。浮点数值计算会产生舍入误差的问题。最高精度为17为小数，但是在算数计算时精确度远远不如整数。例如，0.1+0.2的结果不是0.3，而是0.30000000000000004，这个小误差会导致无法测试特定的浮点数值。 123if (a+b==0.3) &#123; alert("you got 0.3.");&#125; 测试将无法通过。因此，永远不要测试某个特定的浮点数值。 数值范围ECMAScript能够表示的最小数值保存在Number.MIN_VALUE中；最大数值保存在Number.MAX_VALUE中。若超过了JavaScript数值范围的值，就自动转换成特殊的Infinity值，负数为-Infinity，正数为Infinity。如果某次计算返回了正或负的无穷值，就无法继续下一步计算，因为Infinity不是能够参与计算的值。isFinite()函数用来确定参数位于最小和最大数值之间，返回true/false。 NaNNaN是一个特殊的数值。（infinity和NaN都是number类型）任何涉及NaN的操作都会返回NaN。NaN与任何值都不相等，包括NaN本身。 1alert(NaN==NaN) //false isNaN()函数将不是数值的参数转换为数值，不能转换的返回true，帮助我们判断这个值是否“不是数值”。 数值转换 函数 含义 不同 Number() 将任何类型转换为十进制数值 字符串包含非数字，则返回NaN；空字串返回0 parseInt() 将字符串转换为数值 空子串-&gt;NaN，第二参数为进制数；返回字符串前面数字部分 parseFloat() 将字符串转换为数值 没有第二参数，只能解析十进制数；返回字符串前面浮点数字部分 switch语句 switch语句中可以使用任何数据类型，包括字符串、对象等，case值也不一定是常量，可以是变量、表达式。 12345678switch("hello world!") &#123; case "haha": alert("haha"); break; case "hello" + "world!": alert("bingo!"); break;&#125; 1234567891011var num=25;switch(true) &#123; //每个case值都是一个布尔值，与true比较 case num&lt;0: alert("num&lt;0"); break; case num&gt;25: alert("num&gt;25"); break; case num==25: alert("num=25");&#125; switch语句在比较值时使用的是全等操作符===，即类型和数值都要比较。 函数理解参数 ECMAScript函数没有签名（参数类型和个数）。也就是说，即便定义的函数只接受两个参数，在调用这个参数时也未必一定要传递两个参数，可多可少。 参数可以在函数体内通过arguments对象来访问参数数组，从而获取传递给函数的每一个参数。 事实上，arguments对象只是与数组相似（它并不是Array的实例），因为可以通过方括号语法[num]访问每一个元素，用length属性确定传递进来多少个参数。 arguments[n]会和第n个参数的值同步，修改arguments[0]，则第一个参数的值也被修改，但它们的内存空间是独立的，读取这两个值不访问相同的内存空间。没有传递值的命名参数将自动被赋予undefined值。开发人员可以利用length属性让函数能够接收任意个参数并分别实现适当功能（算不上完美的重载，但也足够弥补ECMAScript没有重载的遗憾了），例如：123456789101112131415function getN() &#123; switch(arguments.length) &#123; case 0: alert("no arguments"); break; case 1: alert("1 arguments"); break; case 2: alert("2 arguments"); &#125;&#125;getN(2,2);getN();getN(1); 没有重载 没有函数签名，真正的重载是不可能实现的。 如果定义了两个名字相同的函数，则该名字只属于后定义的函数。后定义的函数覆盖了先定义的函数。 传递参数基本类型 Undefined/Null/Boolean/Number/String 引用类型 是保存在内存中的对象，变量对象中的值实际上为一个指针，指向内存的地址。12345678&lt;script&gt; var ob1 = new Object; var ob2 = ob1; ob1.name="zhuang"; ob2 = new Object; alert(ob1.name); //alert结果为“zhuang”，可知，对象名保存的是地址指针。 &lt;/script&gt; setInterval()和clearInterval()123var myInterval = setInterval(function()&#123; funcname() &#125;, interval_time);or = setInterval(funcname, interval_time);clearInterval(myInterval); 实例 点击控制灯泡亮暗&amp;点击改变字体颜色123456789101112131415161718192021222324252627282930313233343536373839&lt;script type="text/javascript"&gt; function change() &#123; image=document.getElementById("bulb"); if (image.src.match("1")) &#123; image.src="2.png"; &#125; else &#123; image.src="1.png"; &#125; &#125; function changeColor() &#123; word=document.getElementById("demo"); if (word.style.color=="red") &#123; word.style.color="green"; &#125; else word.style.color="red"; &#125; function alertdemo() &#123; x=document.getElementById("inputdemo").value; if (x==""||isNaN(x)) &#123; alert("It's not a numer!"); image.src="1.png"; &#125; else &#123; // alert("right!"); image=document.getElementById('bulb'); image.src="2.png"; &#125; &#125;&lt;/script&gt; &lt;img src="1.png" onclick="change()" id="bulb"&gt; &lt;p id="demo" style="color: red;" onclick="changeColor()"&gt;I can turn green or red!&lt;/p&gt; &lt;button type="button" onclick="changeColor()"&gt;click here to change word color!&lt;/button&gt;&lt;br&gt;&lt;br&gt; &lt;input id="inputdemo" type="text"&gt; &lt;button type="button" onclick="alertdemo()"&gt;alert if what you input isn't a number.&lt;/button&gt; 效果图： 实现简单计算器123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119//完整代码&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;简单计算器&lt;/title&gt; &lt;link rel="shortcut icon" href="../icons/project.jpg"&gt; &lt;style type="text/css"&gt; table &#123; margin: 200px auto; text-align: center; background-color: rgb(251, 249, 242); box-shadow: 3px 3px 10px #555; &#125; body &#123; background: url("../background/ridwhite.png"); &#125; input &#123; background-color: rgb(251, 249, 242); text-align: center; vertical-align: middle; &#125; button &#123; width: 23px; height: 23px; padding: 0; margin: 2px; vertical-align: middle; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table border="1"&gt; &lt;caption style="padding: 2px"&gt;&lt;b&gt;简单计算器&lt;b&gt;&lt;/caption&gt; &lt;tr&gt; &lt;td&gt;第一个数:&lt;/td&gt; &lt;td&gt;&lt;input id="firstNum" placeholder="输入数字"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;第二个数:&lt;/td&gt; &lt;td&gt;&lt;input id="secondNum" placeholder="输入数字"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="2"&gt; &amp;nbsp&lt;button onclick="add()"&gt;＋&lt;/button&gt; &amp;nbsp&lt;button onclick="subtract()"&gt;－&lt;/button&gt; &amp;nbsp&lt;button onclick="multiple()"&gt;×&lt;/button&gt; &amp;nbsp&lt;button onclick="devide()"&gt;÷&lt;/button&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;结果：&lt;/td&gt; &lt;td&gt; &lt;p id="result"&gt;&lt;/p&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;script&gt; var result=new Number; //static value function add() &#123; var a=document.getElementById("firstNum").value; var b=document.getElementById("secondNum").value; if (a==""||b==""||isNaN(a)||isNaN(b)) &#123; sendNum("no"); return; &#125; result=Number(a)+Number(b); //Number(x) turn var x into number x. sendNum(result); &#125; function subtract() &#123; var a=document.getElementById("firstNum").value; var b=document.getElementById("secondNum").value; if (a==""||b==""||isNaN(a)||isNaN(b)) &#123; sendNum("no"); return; &#125; result=Number(a)-Number(b); //Number(x) turn var x into number x. sendNum(result); &#125; function multiple() &#123; var a=document.getElementById("firstNum").value; var b=document.getElementById("secondNum").value; if (a==""||b==""||isNaN(a)||isNaN(b)) &#123; sendNum("no"); return; &#125; result=Number(a)*Number(b); //Number(x) turn var x into number x. sendNum(result); &#125; function devide() &#123; var a=document.getElementById("firstNum").value; var b=document.getElementById("secondNum").value; if (a==""||b==""||isNaN(a)||isNaN(b)) &#123; sendNum("no"); return; &#125; else if (b=="0") &#123; sendNum("no_devide"); return; &#125; result=Number(a)/Number(b); //Number(x) turn var x into number x. sendNum(result); &#125; function sendNum(re) &#123; if (re=="no") alert("请输入数字！"); else if (re=="no_devide") alert("分母不能为0！"); else document.getElementById("result").innerHTML=re; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 改进界面的计算器源代码上传github]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>学习笔记</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
